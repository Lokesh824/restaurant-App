{"version":3,"sources":["Components/Header.js","Components/Card.js","Components/Slider/sliderComponent.js","Components/Slider/index.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Card","value","res","currency","images","src","cuisineVal","toLowerCase","includes","v","find","item","displayImage","cuisines","alt","restaurantName","aggregateRating","averageCostForTwo","field","currencyKey","Object","keys","split","join","currencySymbol","title","style","color","hasTableBooking","hasOnlineDelivery","ratingColor","ratingText","textAlign","votes","railOuterStyle","position","width","height","transform","borderRadius","cursor","railInnerStyle","pointerEvents","backgroundColor","SliderRail","getRailProps","Handle","domain","min","max","handle","id","percent","disabled","getHandleProps","left","WebkitTapHighlightColor","zIndex","role","aria-valuemin","aria-valuemax","aria-valuenow","boxShadow","Track","source","target","getTrackProps","Tick","tick","count","format","marginTop","fontSize","marginLeft","defaultProps","d","sliderTimeOut","searchQuery","sliderStyle","paddingTop","TwoSideSlider","onUpdate","clearTimeout","setTimeout","console","log","props","setLoader","sliderChange","onChange","state","nextProps","nextContext","this","setState","minVal","maxVal","mode","step","rootStyle","values","handles","map","key","right","tracks","ticks","length","Main","fetchCurrency","a","fetch","then","response","json","catch","err","currencyData","error","fetchCsv","reader","body","getReader","decoder","TextDecoder","read","result","decode","readCSV","csvData","Papa","parse","complete","processData","data","arr","averageCost","headings","reduce","acc","val","index","substr","toUpperCase","i","obj","trim","push","c","currencies","name","symbol","Math","costObj","filterData","loader","filterOnSearch","JSON","stringify","filters","search","filter","onChangeHandler","event","rating","Promise","resolve","reject","sliderValue","viewList","inputId","outerDiv","parentNode","clickedDiv","classList","childNodes","toggle","hasAttribute","attributeValue","getAttribute","textContent","remove","parentElement","type","placeholder","htmlFor","onClick","data-value","Fragment","restaurant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8761fb36.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <h1 className=\"heading\">  Restaurants</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Card = ({res,currency}) => {\r\n    const images = [\"asian\",\"seafood\",\"american\",\"fastfood\",\"brazilian\",\"dessert\",\"tea\"]\r\n    const displayImage = (value) => {\r\n        if(!value) return \"/default.jpg\";\r\n       const cuisineVal = value.toLowerCase();\r\n      if(value.includes(','))\r\n      {\r\n          let v = images.find(item => cuisineVal.includes(item))\r\n          return v ? `/${v}.jpg` : \"/default.jpg\"\r\n      }\r\n      else{\r\n          return images.includes(cuisineVal) ? `/${cuisineVal}.jpg` : \"/default.jpg\";\r\n      }\r\n    };\r\n    const currencySymbol = (field) => {\r\n        let currencyKey = Object.keys(currency).find(item => field.toLowerCase().includes(item.toLowerCase().split(\"_\").join(\" \")));\r\n        return currencyKey ? currency[currencyKey] : \"$\"\r\n    };\r\n    const textColor = (value) => {\r\n        if(value.includes(\" \")){\r\n           return \"blue\"\r\n        }\r\n        else if(value.toLowerCase().includes(\"white\")){\r\n            return \"black\"\r\n        }\r\n        else return value.toLowerCase();\r\n    }\r\n\r\n        return (\r\n            <li className=\"card-item\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"card-img\">\r\n                        <img src={`/assets${displayImage(res.cuisines)}`} alt={'card'+res.cuisines}/>\r\n                    </div>\r\n                    <div className=\"card-details\">\r\n                        <h3 className=\"card-heading\">\r\n                            {res.restaurantName}\r\n                        </h3>\r\n                        <div className=\"shineBox\">\r\n                            <span>\r\n                                {res.aggregateRating}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"cuisines\">\r\n                            {res.cuisines}\r\n                        </div>\r\n                        {/*Average Cost */}\r\n                        <div className=\"fx-b100 d-flex\">\r\n                        <div className=\"fx-b50\">\r\n                            <div className=\"average-cost\">\r\n                                Cost for Two\r\n                                <span className=\"ml-10\">{res.averageCostForTwo}  </span>\r\n                                <span>{currencySymbol(res.currency)}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"fx-b50 availabitity-icons\">\r\n                            <a title=\"Table Available\"> <i className=\"fa fa-utensils\" style={{color: res.hasTableBooking === \"Yes\" ? \"green\": \"red\"}}/></a>\r\n                            <a title=\"Delivery Available\"><i className=\"fa fa-motorcycle\"  style={{color: res.hasOnlineDelivery === \"Yes\" ? \"green\": \"red\"}}/></a>\r\n                        </div>\r\n                        </div>\r\n                        {/*Rating And Votes*/}\r\n                        <div className=\"fx-b100 d-flex\">\r\n                        <div className=\"fx-b50\" >\r\n                            Review:  <span className=\"ml-10\" style={{color: textColor(res.ratingColor)}}>{res.ratingText}</span>\r\n                        </div>\r\n                        <div className=\"fx-b50\" style={{textAlign:\"end\"}}>\r\n                            Votes:\r\n                            <div className=\"shineBox ml-10 fx-b100\">\r\n                            <span>\r\n                               {res.votes}\r\n                            </span>\r\n                        </div>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        );\r\n}\r\n\r\nexport default Card;","\r\nimport React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// *******************************************************\r\n// RAIL\r\n// *******************************************************\r\nconst railOuterStyle = {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: 42,\r\n    transform: \"translate(0%, -50%)\",\r\n    borderRadius: 7,\r\n    cursor: \"pointer\"\r\n    // border: '1px solid white',\r\n};\r\n\r\nconst railInnerStyle = {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: 14,\r\n    transform: \"translate(0%, -50%)\",\r\n    borderRadius: 7,\r\n    pointerEvents: \"none\",\r\n    backgroundColor: \"rgb(155,155,155)\"\r\n};\r\n\r\nexport function SliderRail({ getRailProps }) {\r\n    return (\r\n        <Fragment>\r\n            <div style={railOuterStyle} {...getRailProps()} />\r\n            <div style={railInnerStyle} />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nSliderRail.propTypes = {\r\n    getRailProps: PropTypes.func.isRequired\r\n};\r\n\r\n// *******************************************************\r\n// HANDLE COMPONENT\r\n// *******************************************************\r\nexport function Handle({\r\n                           domain: [min, max],\r\n                           handle: { id, value, percent },\r\n                           disabled,\r\n                           getHandleProps\r\n                       }) {\r\n    return (\r\n        <Fragment>\r\n            <div\r\n                style={{\r\n                    left: `${percent}%`,\r\n                    position: \"absolute\",\r\n                    transform: \"translate(-50%, -50%)\",\r\n                    WebkitTapHighlightColor: \"rgba(0,0,0,0)\",\r\n                    zIndex: 5,\r\n                    width: 28,\r\n                    height: 42,\r\n                    cursor: \"pointer\",\r\n                    // border: '1px solid white',\r\n                    backgroundColor: \"none\"\r\n                }}\r\n                {...getHandleProps(id)}\r\n            />\r\n            <div\r\n                role=\"slider\"\r\n                aria-valuemin={min}\r\n                aria-valuemax={max}\r\n                aria-valuenow={value}\r\n                style={{\r\n                    left: `${percent}%`,\r\n                    position: \"absolute\",\r\n                    transform: \"translate(-50%, -50%)\",\r\n                    zIndex: 2,\r\n                    width: 24,\r\n                    height: 24,\r\n                    borderRadius: \"50%\",\r\n                    boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.3)\",\r\n                    backgroundColor: disabled ? \"#666\" : \"#000000\"\r\n                }}\r\n            />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nHandle.propTypes = {\r\n    domain: PropTypes.array.isRequired,\r\n    handle: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        value: PropTypes.number.isRequired,\r\n        percent: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    getHandleProps: PropTypes.func.isRequired,\r\n    disabled: PropTypes.bool\r\n};\r\n\r\nHandle.defaultProps = {\r\n    disabled: false\r\n};\r\n\r\n// *******************************************************\r\n// KEYBOARD HANDLE COMPONENT\r\n// Uses a button to allow keyboard events\r\n// *******************************************************\r\nexport function KeyboardHandle({\r\n                                   domain: [min, max],\r\n                                   handle: { id, value, percent },\r\n                                   disabled,\r\n                                   getHandleProps\r\n                               }) {\r\n    return (\r\n        <button\r\n            role=\"slider\"\r\n            aria-valuemin={min}\r\n            aria-valuemax={max}\r\n            aria-valuenow={value}\r\n            style={{\r\n                left: `${percent}%`,\r\n                position: \"absolute\",\r\n                transform: \"translate(-50%, -50%)\",\r\n                zIndex: 2,\r\n                width: 24,\r\n                height: 24,\r\n                borderRadius: \"50%\",\r\n                boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.3)\",\r\n                backgroundColor: disabled ? \"#666\" : \"#fff\"\r\n            }}\r\n            {...getHandleProps(id)}\r\n        />\r\n    );\r\n}\r\n\r\nKeyboardHandle.propTypes = {\r\n    domain: PropTypes.array.isRequired,\r\n    handle: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        value: PropTypes.number.isRequired,\r\n        percent: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    getHandleProps: PropTypes.func.isRequired,\r\n    disabled: PropTypes.bool\r\n};\r\n\r\nKeyboardHandle.defaultProps = {\r\n    disabled: false\r\n};\r\n\r\n// *******************************************************\r\n// TRACK COMPONENT\r\n// *******************************************************\r\nexport function Track({ source, target, getTrackProps, disabled }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                position: \"absolute\",\r\n                transform: \"translate(0%, -50%)\",\r\n                height: 14,\r\n                zIndex: 1,\r\n                backgroundColor: disabled ? \"#999\" : \"#f5f5f5\",\r\n                borderRadius: 7,\r\n                cursor: \"pointer\",\r\n                left: `${source.percent}%`,\r\n                width: `${target.percent - source.percent}%`\r\n            }}\r\n            {...getTrackProps()}\r\n        />\r\n    );\r\n}\r\n\r\nTrack.propTypes = {\r\n    source: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        value: PropTypes.number.isRequired,\r\n        percent: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    target: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        value: PropTypes.number.isRequired,\r\n        percent: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    getTrackProps: PropTypes.func.isRequired,\r\n    disabled: PropTypes.bool\r\n};\r\n\r\nTrack.defaultProps = {\r\n    disabled: false\r\n};\r\n\r\n// *******************************************************\r\n// TICK COMPONENT\r\n// *******************************************************\r\nexport function Tick({ tick, count, format }) {\r\n    return (\r\n        <div>\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    marginTop: 14,\r\n                    width: 1,\r\n                    height: 5,\r\n                    backgroundColor: \"rgb(200,200,200)\",\r\n                    left: `${tick.percent}%`\r\n                }}\r\n            />\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    marginTop: 22,\r\n                    fontSize: 10,\r\n                    textAlign: \"center\",\r\n                    marginLeft: `${-(100 / count) / 2}%`,\r\n                    width: `${100 / count}%`,\r\n                    left: `${tick.percent}%`\r\n                }}\r\n            >\r\n                {format(tick.value)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nTick.propTypes = {\r\n    tick: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        value: PropTypes.number.isRequired,\r\n        percent: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    count: PropTypes.number.isRequired,\r\n    format: PropTypes.func.isRequired\r\n};\r\n\r\nTick.defaultProps = {\r\n    format: d => d\r\n};\r\n","import React, {Component} from 'react';\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\r\nimport { SliderRail, Handle, Track, Tick } from \"./sliderComponent\"; // example render components - source below\r\n\r\nconst sliderStyle = {\r\n    position: \"relative\",\r\n    width: \"90%\",\r\n    paddingTop: \"15px\"\r\n};\r\n\r\nlet sliderTimeOut;\r\n\r\nclass TwoSideSlider extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            domain: [0,1000]\r\n        };\r\n    }\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        if(nextProps.domain && nextProps.domain !== this.props.domain){\r\n            this.setState({\r\n                domain: [nextProps.domain.minVal,nextProps.domain.maxVal]\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    onUpdate = (value) => {\r\n        clearTimeout(sliderTimeOut);\r\n        sliderTimeOut = setTimeout(()=> { console.log(value);\r\n            this.props.setLoader();\r\n            this.props.sliderChange(value[0],value[1]);\r\n        },1000)\r\n    };\r\n    onChange = () => {\r\n\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Slider\r\n                    mode={2}\r\n                    step={10}\r\n                    domain={this.state.domain}\r\n                    rootStyle={sliderStyle}\r\n                    onUpdate={this.onUpdate}\r\n                    onChange={this.onChange}\r\n                    values={this.state.domain}\r\n                    disabled={this.props.disabled}\r\n                >\r\n                    <Rail>\r\n                        {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\r\n                    </Rail>\r\n                    <Handles>\r\n                        {({ handles, getHandleProps }) => (\r\n                            <div className=\"\">\r\n                                {handles.map(handle => (\r\n                                    <Handle\r\n                                        key={handle.id}\r\n                                        handle={handle}\r\n                                        domain={this.state.domain}\r\n                                        getHandleProps={getHandleProps}\r\n                                        disabled={this.props.disabled}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </Handles>\r\n                    <Tracks left={false} right={false}>\r\n                        {({ tracks, getTrackProps }) => (\r\n                            <div className=\"slider-tracks\">\r\n                                {tracks.map(({ id, source, target }) => (\r\n                                    <Track\r\n                                        key={id}\r\n                                        source={source}\r\n                                        target={target}\r\n                                        getTrackProps={getTrackProps}\r\n                                        disabled={this.props.disabled}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </Tracks>\r\n                    <Ticks count={5}\r\n                    disabled={this.props.disabled}>\r\n                        {({ ticks }) => (\r\n                            <div className=\"slider-ticks\">\r\n                                {ticks.map(tick => (\r\n                                    <Tick key={tick.id} tick={tick} count={ticks.length} />\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </Ticks>\r\n                </Slider>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TwoSideSlider;","import React, {Component} from 'react';\r\nimport Papa from 'papaparse'\r\nimport Card from './Card'\r\nimport TwoSideSlider from \"./Slider\";\r\nlet searchQuery;\r\nclass Main extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loader:true, // Loader when list refreshes\r\n            data: [], // list of restaurants\r\n            filterData: [], // data after filter\r\n            cuisines: [], // unique value of cuisines extracted from data\r\n            filters: { // Filters applied to restaurant list\r\n                search: \"\",\r\n                cuisines: \"all\",\r\n                rating: \"all\",\r\n                currency: \"all\",\r\n                averageCost: {minVal: 0,maxVal: 400}\r\n            },\r\n            currency: {}, // unique currency value mapped with their symbols\r\n            currencyData: [], // all the currencies fetched from API\r\n            averageCost:{}, // min and max value of particular currency\r\n            sliderValue: true // disable the slider\r\n        };\r\n        this.rating = [1, 2, 3, 4];\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.fetchCurrency();\r\n        this.readCSV();\r\n    }\r\n\r\n    fetchCurrency = async () => {\r\n        const currencyData = await fetch('https://restcountries.eu/rest/v2/all?fields=currencies').then(response => response.json())\r\n            .catch(err => err);\r\n        if(!currencyData.error)\r\n        {\r\n            this.setState({currencyData})\r\n        }\r\n    };\r\n    // Function to fetch the CSV file\r\n    fetchCsv = () => {\r\n        return fetch('/restaurantsList.csv').then(function (response) {\r\n            let reader = response.body.getReader();\r\n            let decoder = new TextDecoder('utf-8');\r\n            return reader.read().then(function (result) {\r\n                return decoder.decode(result.value);\r\n            });\r\n        });\r\n    };\r\n    // Read CSV file\r\n    readCSV = async () => {\r\n        let csvData = await this.fetchCsv();\r\n        Papa.parse(csvData, {\r\n            complete: this.processData\r\n        });\r\n    };\r\n    // Function to extract values from the data\r\n    processData = (result) => {\r\n        let data = [],\r\n            arr = result.data,\r\n            cuisines = [],\r\n            currency = {},\r\n            averageCost = {},\r\n            currencyData = this.state.currencyData,\r\n            headings = arr[0].map((item)=>{\r\n            if(item.includes(\" \")){\r\n                return item.split(' ').reduce((acc,val,index) => {\r\n                    let value = val.substr(0,1).toUpperCase() + val.substr(1).toLowerCase();\r\n                    if(index === 1){return acc.toLowerCase() + value;}\r\n                    else return acc + value;\r\n                });\r\n            }\r\n            else{\r\n                return item.toLowerCase();\r\n            }\r\n        });\r\n        for(let i=1;i<arr.length;i++)\r\n        {   let obj = {};\r\n            if(arr[i].length > 1) {\r\n                arr[i].map((item, index) => {\r\n                    obj = {\r\n                        ...obj,\r\n                        [headings[index]]: item\r\n                    };\r\n                    // Unique Cuisines\r\n                    if (headings[index] === \"cuisines\") {\r\n                        if (item.includes(\",\")) {\r\n                            let array = item.split(',');\r\n                            array.map((i) => {\r\n                                let value = i.trim();\r\n                                if (!cuisines.includes(value)) {\r\n                                    cuisines.push(value);\r\n                                }\r\n                            })\r\n                        } else {\r\n                            let value = item.trim();\r\n                            if (!cuisines.includes(value)&& value.length > 1) {\r\n                                cuisines.push(value);\r\n                            }\r\n                        }\r\n                    }\r\n                    //Unique Currency\r\n                    if (headings[index] === \"currency\" && currencyData.length > 0 ) { // Fetch from currency - add  symbol\r\n                        // Symbol - given - if not given then -\r\n                        let c = item.split('(')[0].trim().toLowerCase().split(\" \").join(\"_\");\r\n                        if(!(Object.keys(currency).includes(c))) {\r\n                            for (let obj of currencyData) {\r\n                                if (obj.currencies[0].name.trim().toLowerCase().includes(c.split('_').join(' '))) {\r\n                                    currency = {\r\n                                        ...currency,\r\n                                        [c]: obj.currencies[0].symbol\r\n                                    };\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        // Min and max value for particular currency -\r\n                        if(!Object.keys(averageCost).includes(c))\r\n                        {\r\n                            let costObj = {\r\n                                minVal: arr[i][index-1],\r\n                                maxVal: arr[i][index-1]\r\n                            };\r\n                            averageCost = {\r\n                                ...averageCost,\r\n                                [c] : costObj\r\n                            }\r\n                        }\r\n                        else{\r\n                            averageCost[c].minVal = Math.min(arr[i][index-1],averageCost[c].minVal);\r\n                            averageCost[c].maxVal = Math.max(arr[i][index-1],averageCost[c].maxVal);\r\n                        }\r\n                    }\r\n                });\r\n                data.push(obj);\r\n            }\r\n        }\r\n        this.setState({data,filterData:data,cuisines,loader:false,currency,averageCost});\r\n    };\r\n    //Function to handle search\r\n    filterOnSearch = () => {\r\n        // In this case - this will work as this function is called by onChangeHandler\r\n        // Therefore all the filters have been applied before coming to this stage\r\n        let filterData = JSON.parse(JSON.stringify(this.state.filterData));\r\n        let filters = this.state.filters;\r\n        if(filters.search)\r\n        {\r\n            filterData = filterData.filter((item) =>\r\n                JSON.stringify(item).toLowerCase().includes(filters.search.toLowerCase()))\r\n        }\r\n        this.setState({filterData,loader:false})\r\n    };\r\n    //Function to set loader in case of slider -\r\n    setLoader = () => {\r\n        this.setState({\r\n            loader:true\r\n        })\r\n\r\n    };\r\n    // Function to handle slider value change\r\n    sliderChange = async (minVal,maxVal) => {\r\n        // Using promise of OnChangeHandler here --\r\n        // let filterData = JSON.parse(JSON.stringify(this.state.filterData))\r\n        let filterData = await this.onChangeHandler({target:{name:\"averageCost\",id:\"averageCost\",value:{}}}).then(data => data);\r\n        let currency = this.state.filters.currency.toLowerCase().split(\"_\").join(\" \");\r\n        let filters = JSON.parse(JSON.stringify(this.state.filters))\r\n        filterData = filterData.filter(item => item.currency.trim().toLowerCase().split('(')[0].includes(currency)\r\n            && item.averageCostForTwo >= minVal && item.averageCostForTwo <= maxVal)\r\n        filters.averageCost.minVal = minVal;\r\n        filters.averageCost.maxVal = maxVal;\r\n        this.setState({\r\n            filterData,\r\n            loader:false,\r\n            filters\r\n        })\r\n    };\r\n    // Function to handle state change of input\r\n    onChangeHandler = (event={\r\n        target:{id:\"\",name:\"\"} // Default value of event used, incase of function call -\r\n    }) =>{\r\n        let filters = JSON.parse(JSON.stringify(this.state.filters));\r\n        let filterData = JSON.parse(JSON.stringify(this.state.data));\r\n        filters[event.target.name] = event.target.value;\r\n        this.setState({loader:true});\r\n        // Filter the list on the basis of search value\r\n        if(event.target.id === \"search\" || this.state.filters.search){\r\n            // Debouncing\r\n            clearTimeout(searchQuery);\r\n            searchQuery = setTimeout(this.filterOnSearch,800);\r\n        }\r\n\r\n        // Filter list on basis of selected cuisine value\r\n        if((event.target.id === \"cuisines\" && filters.cuisines !== \"all\") || filters.cuisines !== \"all\" ) {\r\n            filterData = filterData.filter(item => item.cuisines.toLowerCase().includes(filters.cuisines.toLowerCase()));\r\n        }\r\n\r\n        //Filter list on the basis of selected currency\r\n        if((event.target.name === \"currency\" && filters.currency !== \"all\") || filters.currency !== \"all\")\r\n        {   if(event.target.name === \"currency\") filters.averageCost = this.state.averageCost[filters.currency];\r\n            filterData = filterData.filter(item => item.currency.toLowerCase().includes(filters.currency.toLowerCase().split(\"_\").join(\" \")));\r\n        }\r\n\r\n        //Filter list on the basis of rating\r\n        if((event.target.name === \"rating\" && filters.rating !==\"all\") || filters.rating !== \"all\")\r\n        {\r\n            filterData = filterData.filter(item => item.aggregateRating >= filters.rating)\r\n        }\r\n\r\n        //Filter list for price range\r\n        if(event.target.name !== \"averageCost\" && filters.currency !== \"all\" && this.state.averageCost[filters.currency] !== filters.averageCost)\r\n        {   let averageCost= this.state.filters.averageCost;\r\n            filterData = filterData.filter(item => item.currency.trim().toLowerCase().includes(filters.currency.toLowerCase().split(\"_\").join(\" \"))\r\n                && item.averageCostForTwo >= averageCost.minVal && item.averageCostForTwo <= averageCost.maxVal)\r\n        }\r\n\r\n        // Promise required to change the slider value -\r\n        // As if we take only filterData from state in case of slider - i.e JSON.parse(JSON.stringify(filterData));\r\n        // If value removed once, slider reset, value will not appear\r\n        // because - slider is filtering from filterData. Therefore incase of slider - we need promise -\r\n        // TRY Filter - Cuisine - French - Currency as Botswana and reduce the value to 1000\r\n        // Uncomment line number 163 and comment line 164\r\n      return new Promise((resolve,reject)=>{\r\n          this.setState({\r\n              filters,\r\n              filterData,\r\n              loader:filters.search.length>0 || event.target.name === \"averageCost\",\r\n              //2. If search value exist then loader will get false in that function only\r\n              // or this function is called by Slider function\r\n              sliderValue: filters.currency === \"all\" //Disable value for slider\r\n          },() => {\r\n              resolve(this.state.filterData);\r\n          });\r\n\r\n      })\r\n    };\r\n    // Function to handle custom select option\r\n    viewList = (event) => {\r\n        let outerDiv = event.target.parentNode;\r\n        let clickedDiv = event.target;\r\n        let inputId;\r\n        if(outerDiv.classList.value.includes(\"filter\")) {\r\n            let listItem = outerDiv.childNodes[1];\r\n            listItem.classList.toggle('displayList')\r\n        }\r\n        else if(clickedDiv.hasAttribute('data-value')){\r\n           let filters = JSON.parse(JSON.stringify(this.state.filters))\r\n            let attributeValue = clickedDiv.getAttribute('data-value');\r\n            outerDiv.parentNode.childNodes[0].childNodes[0].textContent = attributeValue;\r\n            outerDiv.parentNode.childNodes[1].classList.remove('displayList');\r\n            inputId = outerDiv.parentElement.parentElement.getAttribute('id');\r\n            filters[inputId] = attributeValue;\r\n            this.setState({filters}, ()=> {\r\n                // Dispatch Event or call the onChangeHandler function\r\n                // 3. Changing the value of input box by setState does not trigger onChange function of input -\r\n                this.onChangeHandler({target: {name:inputId,id:inputId,value:attributeValue}})\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"searchBox\">\r\n                    <input type=\"text\" name=\"search\" placeholder=\" \" value={this.state.filters.search} onChange={this.onChangeHandler} id=\"search\"/>\r\n                    <label className=\"placeholder-label\" htmlFor=\"search\">Search a restaurant</label>\r\n                </div>\r\n                <h3 className=\"filter-heading\">Filter By: </h3>\r\n                <div className=\"filter-div\">\r\n                <div className=\"filter-wrapper\" id=\"cuisines\">\r\n                    <label htmlFor={\"cuisines\"}>Cuisines</label>\r\n                    <div className=\"filter\" onClick={this.viewList}>\r\n                        <div className=\"filter-value-wrapper\" >\r\n                            <span className=\"filter-value\">All</span>\r\n                            <span className=\"filter-icon\"><i className=\"fa fa-chevron-down\"/></span>\r\n                        </div>\r\n                        {/*<input className=\"filter-input\" value={this.state.filters.cuisines} id=\"cuisines\" onChange={this.onChangeHandler} name=\"cuisines\" />*/}\r\n                        <ul className=\"optionList\">\r\n                            <li data-value=\"all\">All</li>\r\n                            {this.state.cuisines.map((item,index)=> {\r\n                                return <li data-value={item} key={index}>{item}</li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                    <div className=\"filter-wrapper\" id=\"rating\">\r\n                        {/*Custom select option no need of input box*/}\r\n                        <label htmlFor={\"rating\"}>Rating</label>\r\n                        <div className=\"filter\" onClick={this.viewList}>\r\n                            <div className=\"filter-value-wrapper\" >\r\n                                <span className=\"filter-value\">All</span>\r\n                                <span className=\"filter-icon\"><i className=\"fa fa-chevron-down\"/> </span>\r\n                            </div>\r\n                            <ul className=\"optionList\">\r\n                                <li data-value=\"all\">All</li>\r\n                                {this.rating.map((item,index)=> {\r\n                                    return <li data-value={item} key={index}>{item}</li>\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"filter-wrapper fx-b40\">\r\n                        <label htmlFor={\"currency\"}>Currency</label>\r\n                        <div className=\"checkBoxDiv\">\r\n                            <label className=\"radioBox\">None\r\n                                <input type=\"radio\" value=\"all\" onChange={this.onChangeHandler}  name=\"currency\" />\r\n                                <span className=\"checkmark\"/>\r\n                            </label>\r\n                            {Object.keys(this.state.currency).map((item,index) =>\r\n                                (   <React.Fragment key={index}>\r\n                                        <label className=\"radioBox\">{item}\r\n                                            <input type=\"radio\" onChange={this.onChangeHandler} value={item} name=\"currency\" />\r\n                                            <span className=\"checkmark\"/>\r\n                                        </label>\r\n                                    </React.Fragment>\r\n                                    ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"filter-wrapper fx-b30\">\r\n                        <label htmlFor={\"averageCost\"}>Cost For Two</label>\r\n                        <TwoSideSlider className={\"filter\"} setLoader={this.setLoader} domain={this.state.averageCost[this.state.filters.currency]} sliderChange={this.sliderChange} disabled={this.state.sliderValue}  />\r\n                    </div>\r\n                </div>\r\n                <div className=\"outer\">\r\n                    {this.state.loader ?\r\n                        <div className=\"loader\"> </div>\r\n                        :\r\n                        !this.state.filterData.length ?\r\n                            <div className=\"empty-list\">Oops !! <span className=\"ml-10\">No Restaurants found.</span> </div> :\r\n                        <ul className=\"cards\">\r\n                            {this.state.filterData.map((restaurant, index) => {\r\n                                return <Card key={index} currency={this.state.currency} res={restaurant}/>\r\n                            })}\r\n                        </ul>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Header from './Components/Header'\nimport Main from './Components/Main'\nimport './main.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}